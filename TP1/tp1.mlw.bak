(* ***** Exercice 0 ***** *)
module Ex0
  use int.Int
  
  val somme (i j : int) : int
  ensures { result = i + j}
 
end

module Ex0Test
  use int.Int
  use Ex0

  let test0 () = assert { 2 < 4 }

  let test1 () = 
      let tmp = somme 3 4 in
        assert { tmp = 7 };
        assert { 0 < tmp }

  let test2 () = 
      let tmp = somme (-6) (-4) in
        assert { tmp = -10 };
        assert { tmp < 0 }
     
  let test3 () = 
      let tmp = somme 0 0 in
        assert { tmp = 0 }
        
 let test4 () = 
  let tmp = somme 2 5 in 
    assert {tmp = 7 }
      
end



(* ***** Exercice 1 ***** *)

module Ex1
  use int.Int
    
  let mauvaismax (i j : int) : int
  ensures { result = i \/ result = j } 
  = 
  
  if i <= j then j else i
  
  
  let max (i:int) (j:int) : int
  ensures { i <= j -> result = j }
  ensures { i > j -> result = i } 
  =
  if i <= j then j else i

  let max2 (i:int) (j:int) : int
  requires { 0 < i /\ 0 < j }
  ensures { i <= j -> result = j }
  ensures { i > j -> result = i }   
  =
  
  if i <= j then j else i
  
  (* Q2 : why3 parvient à verifier les trois sous-progrmmes mais n'arrive pas à prouver mauvais max quand les valeurs sont differentes *)

(* ******** Sous programme min ***** *) 

  let min (i:int) (j:int) : int 
  ensures { i <= j -> result = i }
  ensures { i > j -> result = j }
   = 
   if i <= j then i else j 
   
   
end

module Ex1Test
  use int.Int
  use Ex1

  let test1 () = 
      let tmp = mauvaismax 3 4 in
      assert { tmp = 4 }

  let test2 () = 
      let tmp = max 3 4 in
      assert { tmp = 4 }
     
  let test3 () = 
      let tmp2 = max2 3 4 in
      assert { tmp2 = 4 }
      
   let test4 () = 
      let tmp = mauvaismax 4 4 in
      assert { tmp = 4 }

  let test5 () = 
      let tmp = max 4 4 in
      assert { tmp = 4 }
     
  let test6 () = 
      let tmp2 = max2 4 4 in
      assert { tmp2 = 4 }
      
      (**** apres ajout des test le programme fonctionne normalement **** *)
end


(* ***** Exercice 2 ***** *)

module Ex2
  use int.Int
  
  val absq1 (n : int) : int
 
  ensures { result >= 0 }
  
  
   let absq3 (n : int) : int
 
  ensures { result >= 0 }
  =
  if n >= 0 then n else -n
  
   let absq4 (n : int) : int
  
  requires { n < 0 } 
  ensures { result >= 0  }
 
  =
  -n
  
   let absq5 (n : int) : int
  
  requires { n+2 < 0 } 
  ensures { result >= 0  }
  
  =
  
  -(2+n)
  
   let absq6 (n : int) : int
  
  requires { n+2 < 0 } 
  ensures { result >= 0 }
  =
  
  -(1+n)
  
  (* Q6 :  le sous-programme est prouvé *)
  
  let absq7 (n : int) : int
 
  ensures { result >= 0  }
  ensures { result = n  \/ result = -n  }
  =
  if n >= 0 then n else -n
 
end

module Ex2Test
  use int.Int
  use Ex2

  let test1 () =
    let tmp = absq1 (-6) in
       assert { 0 <= tmp };
       assert { tmp = 6 }
       
  let test2 () =
    let tmp = absq1 (8) in
       assert { 0 <= tmp };
      assert { tmp = 8 } 
      
      let test3 () =
    let tmp = absq1 (-5) in
       assert { 0 <= tmp };
      assert { tmp = 5 }
   (* ** Q2 : on constate que la spec n'est pas précise *** *)
   
   let test4 () =
    let tmp = absq7 (-6) in
       assert { 0 <= tmp };
       assert { tmp = 6 }
       
  let test5 () =
    let tmp = absq7 (8) in
       assert { 0 <= tmp };
       assert { tmp = 8 }
       
  let test6 () =
    let tmp = absq7 (-5) in
       assert { 0 <= tmp };
      assert { tmp = 5 }
  (* Q7 :  les tests sont effectivements prouves *)
end



(* ***** Exercice 3 ***** *)
 
 module Ex3
  use int.Int
  use ref.Ref
  use ref.Refint
  
  let boucle (n:int)
  requires { 0 < n }
  ensures { result = n }
  =
  let i = ref 0 in 
     while (not(!i = n)) do
        invariant { 0 <= !i <= n }
        variant { n - !i }
        incr i
     done;
     assert { !i = n };
  !i   
  
  
    let boucle_q3 (n:int) : int
  requires { 0 < n }
  ensures { result = 0}
  =
  let i = ref n in 
     while !i > 0 do
        invariant { 0 <= !i <= n }
        variant { !i }
        decr i
     done;
     assert { !i = 0 };
  !i 
  
  
end

(*** Q1 : Why3 n'arrive pas a prouver toutes les proprietes de cet exemple,
 why3 parvient à verifier :
 -l'initialisation de l'invariant
 -la decrementation du variant
 -la preservation de l'invariant
 -la postcondition ***)
 
 (*** Q2 :  why3 parvient à verifier l'invariant de la boucle et l'assertion.
  Pas besoin de modifer le variant ***)




module Ex3Test
  use int.Int
  use Ex3

  let test () = 
      let tmp = boucle 4 in
      assert {  tmp = 4 }  

end



(* ***** Exercice 4 ***** *)

module Ex4
  use int.Int
  use ref.Ref

  let calcul (x y: int) : int
  requires {0 <= x }
  requires {0 <= y }
  ensures { result = 2*x + y } 
  
  = 
  
  let r = ref x in
    let n = ref y in
    while !n <> 0 do
      invariant { !r = x + y - (!n) /\ 0 <= !n }
      variant   { !n }
        r := !r + 1 ;
        n := !n - 1
    done;
    
    !r+x

end
