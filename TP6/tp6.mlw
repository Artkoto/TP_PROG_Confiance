module TriEx1 (* EXERCICE 1 *)
  use int.Int
  use ref.Ref
  use ref.Refint
  use array.Array
  use array.IntArraySorted (* sorted et sorted_sub *)
  use array.ArraySwap      (* swap *)
  use array.ArrayPermut    (* permut_all *)
  use array.ArrayEq

(* Prédicats et sous-programme utiles (et vus au cours 3)

  predicate sorted (a : array int)

  predicate sorted_sub (a : array int) (i j : int)

  predicate permut_all (a1 a2: array 'a)

  val swap (a: array int) (i: int) (j: int) =
  requires { 0 <= i < length a /\ 0 <= j < length a }
  ensures { exchange (old a) a i j }
*)

(* Question 1 *)

let minimum (t:array int) (m n:int) : int
requires {0 <= m < n <= length t}
ensures { forall j : int.  (m <= j < n) -> t[j] >= t[result]}
ensures {m <= result < n}
  = 
  let indiceMinimun = ref m in  
  for i = m+1 to n-1 do 
      invariant {forall j : int. (m <= j < i) -> t[j] >= t[!indiceMinimun]}
      invariant { m <= !indiceMinimun < n }
      if t[i] < t[!indiceMinimun] then 
        indiceMinimun := i 
        
  done;
  !indiceMinimun       
          

(* Question 2 *)
let tri_selection (t: array int) : unit
writes{t}
ensures{sorted t}
ensures{ permut_all (old t) t }
ensures{ forall i :int. 0<= i < t.length -1 -> t[i] <= t[i+1] }
 (* a modifier et completer *) 
 =
 let min = ref 0 in

 for i = 0 to t.length -1 do
 invariant{forall k l :int.( 0<= k < i && i<= l < t.length ) -> t[k] <= t[l] }
 invariant{sorted_sub t 0 i}
 invariant{ permut_all (old t) t }
 min := minimum t i t.length;
 if !min <> i then
 swap t i !min

done


(* Question 2 : test *)
(* Ce test est à exécuter depuis un terminal,
   avec la commande suivante :
   
why3 execute tp6.mlw TriEx1.test_triSelection
  
*)

  let test_triSelection() : array int = 
  let t = make 9 1 in 
  t[0] <- 9 ; t[1] <- 7 ; t[2] <- 8 ; t[3] <- 5;
  t[4] <- 2 ; t[5] <- 4 ; t[6] <- 3 ; t[7] <- 6;
  tri_selection t ; 
  t


end

module TriEx2 (* EXERCICE 2 *)
  use int.Int
  use ref.Ref
  use ref.Refint
  use array.Array
  use array.IntArraySorted
  use array.ArrayPermut
  use array.ArrayEq

(* Question 1 *)
(* Compléter la spécification et les invariants du programme suivant *)
(* Cette version est plus simple que celle proposée sur wikipedia.   *)

  val tri_insertion_v0 (t: array int) : unit 
 (* a modifier et completer  *) 

(* Code à utiliser pour cette version, sans le modifier *)
(*
     for i = 1 to (length t) - 1 do
      invariant { (* a completer *) }
      
      let courant = t[i] in 
      let j = ref i in 
      
      while (!j > 0 && t[!j - 1] > courant) do
        variant { (* a completer *) }
        invariant { (* a completer *) }
        
        t[!j] <- t[!j - 1] ;
        t[!j - 1] <- courant ;
        decr j
      done
      
    done  

*)

(* Question 2 *)
(* En s'inspirant de tri_insertion_v0, spécifier, programmer et prouver 
   la version plus optimisée de wikipedia *)
  val tri_insertion (t: array int) : unit 
 (* a modifier et completer  *) 


end

module TriEx3 (* EXERCICE 3 *)
  use int.Int
  use ref.Ref
  use ref.Refint
  use array.Array
  use array.IntArraySorted
  use array.ArraySwap
  use array.ArrayPermut
  use array.ArrayEq
  
val tri_bulles (t: array int) : unit
 (* a modifier et completer  *) 


end  