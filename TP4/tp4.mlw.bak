module LabySpec
  use int.Int
  use bool.Bool
  use matrix.Matrix 
  use ref.Ref
  use random.Random (* pour utiliser random_int et random_bool dans mk_laby *)

          (************************************************)
          (******** LES DEFINITIONS DE TYPES **************)
          (************************************************)


  (* question 0 *)
  
  type case =  Libre | Mur | Sortie 

  type laby =  matrix case 

  type direction = Haut | Bas | Droite | Gauche
          (************************************************)
          (******** LES PREDICATS ET FONCTIONS   **********)
          (************************************************)
 
  (* question 1 *)          
  predicate laby_valide (b : laby) = 
  
  exists r c :int . valid_index b r c /\ get b r c = Sortie
  /\
  forall i j :int. (r <> i \/ c <> j) 
  /\
  valid_index b i j ->  get b i j = Libre \/ get b i j = Mur

  (* question 2 *)
  predicate position_valide (b : laby) (i j : int) =
  valid_index b i j /\ laby_valide b /\ not get b i j = Mur  


  (* question 3 *)
  predicate sortie_trouvee (b : laby) (i j : int) =  
  valid_index b i j /\ laby_valide b /\ get b i j = Sortie
  
  
  (* question 6 - à utiliser dans deplacement *)
  function nouvelle_position (i j : int) (d : direction) : (int, int) 
  =
    match d with
    |Haut -> (i-1) , j
                    
    |Bas -> (i+1) , j
            
    |Gauche ->  i , (j-1)
    
    |Droite ->  i , (j+1)  
    
    end
    
    (* a modifier et completer *)
 
           (*****************************************)
           (******** LES SOUS-PROGRAMMES   **********)
           (*****************************************)
  
  
  (* question 4 *)
  let (=) (x y:case) : bool   (* A utiliser dans gagne *)
  ensures { result <-> x=y }
  =
   match x with
    |Libre -> 
        match y with
        |Libre -> true
        |Mur-> false
        |Sortie-> false
        end
                    
    |Mur -> 
        match y with
        |Libre -> false
        |Mur-> true
        |Sortie-> false
        end
            
    |Sortie ->  
        match y with
        |Libre -> false
        |Mur-> false
        |Sortie-> true
        end
    
    end
          
  let gagne (b : laby) (i j : int) : bool 
  requires{laby_valide b}
  requires{ valid_index b i j}
  ensures {result <-> sortie_trouvee b i j} 
  =
  let case1 = ref Sortie in
  let case2 = ref (get b i j) in

 if ( (=) !case1 !case2 ) then true else false
 

  (* a completer *)

  (* question 5 *)
  let peut_se_deplacer (b : laby) (i j : int) : bool 
  requires{laby_valide b}
  requires{ valid_index b i j}
  ensures {result <-> position_valide b i j }
  =
  if ( (=) (get b i j) Sortie || (=) (get b i j) Libre) then true 
  else false
  (* a completer *)

  (* question 6 *)
  (* Dans la specification, il faut utiliser la fonction 
     nouvelle_position à définir plus haut *)
  let deplacement (b : laby) (i j : int) (d : direction) : (int, int)
  requires{laby_valide b}
  requires{ position_valide b i j}
  ensures { 
            let (r , c) = (nouvelle_position i j d ) in 
            (
            (position_valide b r c 
            /\ 
           result =  (r , c) )
           \/
           ( not position_valide b r c 
            /\ 
           result = (i , j) )
            )
           }
  =

     match d with
    |Haut 
        ->  if ( not (i = 0 || (=) (get b (i-1)  j) Mur) ) 
        then  ((i-1) , j)
         else (i,j)
                    
    |Bas 
        -> if ( not (i = (b.rows-1) || (=) (get b (i+1)  j) Mur))
         then  ((i+1) , j)
         else  (i,j)   
            
    |Gauche 
        -> if  ( not ( j = 0 || (=) (get b i (j-1)) Mur))
        then  (i , (j-1))
        else  (i,j)
    
    |Droite 
        -> if (not ( j = (b.columns-1) || (=) (get b i (j+1)) Mur)) 
        then  (i , (j+1))
        else  (i,j)
    
    end
  (* a completer *)
    
  (* question 9 *)
  let mk_laby (n : int) (m : int) : laby 
  ensures{laby_valide result}
  =
        let lab1 = make n m Libre  in
        let r = random_int lab1.rows in
        let c = random_int lab1.columns in
        let vroufx = random_bool in 
        set lab1 r c Sortie ;


        for i = 0 to lab1.rows-1 do 
         invariant{0 <= i < lab1.rows }
           for j = 0 to lab1.columns-1 do 
           invariant{valid_index lab1 i j}
          if not (i = r && j = c) then 
          begin 
          if vroufx = true  then set lab1 i j Libre else set lab1 i j Mur
          end; 

           done ;

           done;


        lab1




  (* a completer *)

  (* question 10 *)
  let rec position_initiale (b : laby) : (int, int) 
  variant {1}
  requires{laby_valide b}
  ensures { let (r, c) = result in position_valide b r c   }
  =
 
 (* let i = ref 0 in
  let j = ref 0 in*)

  let i = random_int b.rows in
  let j = random_int b.columns in

  (*while not (peut_se_deplacer b !i !j) do 
  invariant{valid_index b !i !j}
  variant{1}
  i := random_int b.rows ;
  j := random_int b.columns ; 

  

done;*)

  if (not peut_se_deplacer b i j ) 
  then
  position_initiale b
  else
  (i , j)

  (* a completer *)
  
end

module LabyTest
  use LabySpec

 let testLaby () = 
      let m = mk_laby 3 4 in
      let i,j = position_initiale m in
      assert { laby_valide m } ;
      assert { position_valide m i j } ;
      let b = peut_se_deplacer m i j in
      assert { b } ;
      let i',j' = deplacement m i j Haut in
      assert { position_valide m i' j' }

end
